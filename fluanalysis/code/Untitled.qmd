---
title: "modeleval"
format:
  html:
    theme: default
---

# Libraries and Loading Data:

#### Library

```{r}
library(here)
library(tidyverse)
library(rsample) #Data splitting
library(tidymodels)#Modeling
library(recipes) #Ordinal data
```

#### Data

```{r}
d<- readRDS(here("fluanalysis", "data", "SypAct_clean.rds"))
```

# Data Splitting:

#### Split Data

```{r}
# Fix the random numbers by setting the seed 
# This enables the analysis to be reproducible when random numbers are used 
set.seed(222)
# Put 3/4 of the data into the training set 
data_split <- initial_split(d, prop = 3/4)

# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
```

# Creating Recipe and Workflow:

#### Create New Recipe Between Nausea and All Other Variables

```{r}
flu_rec<- 
  recipe(Nausea ~ ., data = train_data) %>%
  step_dummy(Nausea) %>% #Code categorical variables as unordered factors
  

flu_rec<- flu_rec %>%
  step_nzv(all_date_predictors())
```

#### Fit the Model

```{r}
lr_mod <- 
  logistic_reg() %>% 
  set_engine("glm")
```

#### Create Workflow: Model + Recipe

```{r}
flu_wflow <- 
  workflow() %>% 
  add_model(lr_mod) %>% 
  add_recipe(flu_rec)
```

#### Prepare Recipe and Train Model from the resulting predictors

```{r}
flu_fit <- 
  flu_wflow %>% 
  fit(data = train_data)

tidy(flu_fit)
```

# Using Trained Workflow to Predict:

#### Predict

```{r}
predict(flu_fit, test_data)
```

#### Augment

```{r}
flu_aug_test<- 
  augment(flu_fit, test_data)

flu_aug_train<- 
  augment(flu_fit, train_data)
```

This shows the probabilities of either Yes or No for flu symptoms.

# Evaluate Performance:

## Test Data

#### ROC Curve

```{r}
flu_aug_test %>% 
  roc_curve(truth = Nausea, .pred_Yes, event_level = "second") %>% #> For binary classification, the first factor level is assumed to be the event. Use the argument `event_level = "second"` to alter this as needed.
  autoplot()
```

#### Area Under the Curve

```{r}
flu_aug_test %>% 
  roc_auc(truth = Nausea, .pred_Yes, event_level = "second")
```

## Train Data

#### ROC Curve

```{r}
flu_aug_train %>% 
  roc_curve(truth = Nausea, .pred_Yes, event_level = "second") %>% 
  autoplot()
```

#### Area Under the Curve

```{r}
flu_aug_train %>% 
  roc_auc(truth = Nausea, .pred_Yes, event_level = "second")
```

# ALTERNATIVE MODEL:

#### Create New Recipe

```{r}
vom_rec<- 
  recipe(Nausea ~ Vomit, data = train_data) %>%
  step_dummy(Nausea) %>% #Code categorical variables as unordered factors
  step_dummy(Vomit)

```

#### Fit a Model

```{r}
lr_mod <- 
  logistic_reg() %>% 
  set_engine("glm")
```

#### Create Workflow: Model + Recipe

```{r}
vom_wflow <- 
  workflow() %>% 
  add_model(lr_mod) %>% 
  add_recipe(vom_rec)
```

#### Prepare Recipe and Train Model from the resulting predictors

```{r}
vom_fit <- 
  vom_wflow %>% 
  fit(data = train_data)

tidy(vom_fit)
```

# Using Trained Workflow to Predict:

#### Predict

```{r}
predict(vom_fit, test_data)
```

#### Augment

```{r}
vom_aug_test<- 
  augment(vom_fit, test_data)

vom_aug_train<- 
  augment(vom_fit, train_data)
```

# Evaluate Performance:

## Test Data

#### ROC Curve

```{r}
vom_aug_test %>% 
  roc_curve(truth = Nausea, .pred_Yes, event_level = "second") %>% 
  autoplot()
```

#### Area Under the Curve

```{r}
vom_aug_test %>% 
  roc_auc(truth = Nausea, .pred_Yes, event_level = "second")
```

## Train Data

#### ROC Curve

```{r}
vom_aug_train %>% 
  roc_curve(truth = Nausea, .pred_Yes, event_level = "second") %>% 
  autoplot()
```

#### Area Under the Curve

```{r}
vom_aug_train %>% 
  roc_auc(truth = Nausea, .pred_Yes, event_level = "second")
```
