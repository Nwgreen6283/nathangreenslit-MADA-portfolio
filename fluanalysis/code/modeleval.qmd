---
title: "modeleval"
format:
  html:
    theme: default
---

# Libraries and Loading Data:

#### Library

```{r}
library(here)
library(tidyverse)
library(rsample) #Data splitting
library(tidymodels)#Modeling
```

#### Data

```{r}
d<- readRDS(here("fluanalysis", "data", "SypAct_clean.rds"))
```

# Data Splitting:

#### Split Data

```{r}
# Fix the random numbers by setting the seed 
# This enables the analysis to be reproducible when random numbers are used 
set.seed(222)
# Put 3/4 of the data into the training set 
data_split <- initial_split(d, prop = 3/4)

# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
```

# Creating Recipe and Workflow:

#### Create New Recipe Between Nausea and All Other Variables

```{r}
flu_rec<- 
  recipe(Nausea ~ ., data = train_data) %>%
  step_dummy(all_nominal(), - all_outcomes()) %>%
  step_nzv(all_predictors())
tidy(flu_rec)
```

#### 

#### Fit the Model

```{r}
lr_mod <- 
  logistic_reg() %>% 
  set_engine("glm")
```

#### Create Workflow: Model + Recipe

```{r}
flu_wflow <- 
  workflow() %>% 
  add_model(lr_mod) %>% 
  add_recipe(flu_rec)
```

#### Prepare Recipe and Train Model from the resulting predictors

```{r}
flu_fit <- 
  flu_wflow %>% 
  fit(data = train_data)

tidy(flu_fit)
```

# Using Trained Workflow to Predict:

#### Predict

```{r}
predict(flu_fit, test_data)
```

#### Augment

```{r}
flu_aug_test<- 
  augment(flu_fit, test_data)

flu_aug_train<- 
  augment(flu_fit, train_data)
```

This shows the probabilities of either Yes or No for flu symptoms.

# Evaluate Performance:

## Test Data

#### ROC Curve

```{r}
flu_aug_test %>% 
  roc_curve(truth = Nausea, .pred_Yes, event_level = "second") %>% #> For binary classification, the first factor level is assumed to be the event. Use the argument `event_level = "second"` to alter this as needed.
  autoplot()
```

#### Area Under the Curve

```{r}
flu_aug_test %>% 
  roc_auc(truth = Nausea, .pred_Yes, event_level = "second")
```

## Train Data

#### ROC Curve

```{r}
flu_aug_train %>% 
  roc_curve(truth = Nausea, .pred_Yes, event_level = "second") %>% 
  autoplot()
```

#### Area Under the Curve

```{r}
flu_aug_train %>% 
  roc_auc(truth = Nausea, .pred_Yes, event_level = "second")
```

# ALTERNATIVE MODEL:

#### Create New Recipe

```{r}
vom_rec<- 
  recipe(Nausea ~ Vomit, data = train_data)
```

#### Fit a Model

```{r}
lr_mod <- 
  logistic_reg() %>% 
  set_engine("glm")
```

#### Create Workflow: Model + Recipe

```{r}
vom_wflow <- 
  workflow() %>% 
  add_model(lr_mod) %>% 
  add_recipe(vom_rec)
```

#### Prepare Recipe and Train Model from the resulting predictors

```{r}
vom_fit <- 
  vom_wflow %>% 
  fit(data = train_data)

tidy(vom_fit)
```

# Using Trained Workflow to Predict:

#### Predict

```{r}
predict(vom_fit, test_data)
```

#### Augment

```{r}
vom_aug_test<- 
  augment(vom_fit, test_data)

vom_aug_train<- 
  augment(vom_fit, train_data)
```

# Evaluate Performance:

## Test Data

#### ROC Curve

```{r}
vom_aug_test %>% 
  roc_curve(truth = Nausea, .pred_Yes, event_level = "second") %>% 
  autoplot()
```

#### Area Under the Curve

```{r}
vom_aug_test %>% 
  roc_auc(truth = Nausea, .pred_Yes, event_level = "second")
```

## Train Data

#### ROC Curve

```{r}
vom_aug_train %>% 
  roc_curve(truth = Nausea, .pred_Yes, event_level = "second") %>% 
  autoplot()
```

#### Area Under the Curve

```{r}
vom_aug_train %>% 
  roc_auc(truth = Nausea, .pred_Yes, event_level = "second")
```

# **This section added by Kimberly Perez**

## **Making the Recipe \[Training\]**

```{r}
set.seed(321)
#Creating the recipe 
BT_recipe<- recipe(BodyTemp ~., data=train_data)
```

## **Workflow Creation and Prediction \[Training\]**

```{r}
#Now let's set or define our model
lr_BT<- linear_reg() %>%
  set_engine("lm")

#Creating Workflow
BT_WF<- workflow() %>% 
  add_model (lr_BT) %>%
  add_recipe(BT_recipe)

#Creation of Single Function
BT_fit<- BT_WF %>% 
  fit(data= train_data)

#Extracting 
BT_fit %>%
  extract_fit_parsnip() %>%
  tidy()

#Predicting 
predict(BT_fit, train_data)

pred_BT<- augment(BT_fit, train_data)

pred_BT %>% 
  select(BodyTemp, .pred)
```

## **Model Assessment 1 \[Training\]**

```{r}
BT_rmse<- pred_BT %>% 
  rmse(truth=BodyTemp, .pred)

BT_rmse
```

## **Model Assessment 2 \[Training\]**

```{r}
BT_rsq<- pred_BT %>% 
  rsq(truth=BodyTemp, .pred)

BT_rsq
```

## **Making the Recipe \[Test\]**

```{r}
set.seed(321)
#Creating the recipe 
BT_recipe_test<- recipe(BodyTemp ~., data=test_data)
```

## **Workflow Creation and Prediction \[Test\]**

```{r}
#Now let's set or define our model
lr_BT_test<- linear_reg() %>%
  set_engine("lm")

#Creating Workflow
BT_WF_test<- workflow() %>% 
  add_model (lr_BT_test) %>%
  add_recipe(BT_recipe)

#Creation of Single Function
BT_fit_test<- BT_WF_test %>% 
  fit(data= test_data)

#Extracting 
BT_fit_test %>%
  extract_fit_parsnip() %>%
  tidy()

#Predicting 
predict(BT_fit_test, test_data)

pred_BT_test<- augment(BT_fit_test, test_data)

pred_BT_test %>% 
  select(BodyTemp, .pred)
```

## **Model Assessment 1 \[Test\]**

```{r}
BT_rmse_test<- pred_BT_test %>% 
  rmse(truth=BodyTemp, .pred)

BT_rmse_test
```

## **Model Assessment 2 \[Test\]**

```{r}
BT_rsq_test<- pred_BT_test %>% 
  rsq(truth=BodyTemp, .pred)

BT_rsq_test
```

## **Making the Recipe: Body Temperature & Runny Nose \[Training\]**

```{r}
set.seed(321)
#Creating the recipe 
BTRN_recipe<- recipe(BodyTemp~RunnyNose, data=train_data)
```

## **Workflow Creation and Prediction \[Training\]**

```{r}
#Now let's set or define our model
lr_BTRN<- linear_reg() %>%
  set_engine("lm")

#Creating Workflow
BTRN_WF<- workflow() %>% 
  add_model (lr_BTRN) %>%
  add_recipe(BTRN_recipe)

#Creation of Single Function
BTRN_fit<- BTRN_WF %>% 
  fit(data= train_data)

#Extracting 
BTRN_fit %>%
  extract_fit_parsnip() %>%
  tidy()

#Predicting 
predict(BTRN_fit, train_data)

pred_BTRN<- augment(BTRN_fit, train_data)

pred_BTRN %>% 
  select(BodyTemp, .pred)
```

## **Model Assessment 1 \[Training\]**

```{r}
BTRN_rmse<- pred_BTRN %>% 
  rmse(truth=BodyTemp, .pred)

BTRN_rmse
```

## **Making the Recipe: Body Temperature & Runny Nose \[Training\]**

```{r}
set.seed(321)
#Creating the recipe 
BTRN_recipe_test<- recipe(BodyTemp~RunnyNose, data=test_data)
```

## **Workflow Creation and Prediction \[Test\]**

```{r}
#Now let's set or define our model
lr_BTRN_test<- linear_reg() %>%
  set_engine("lm")

#Creating Workflow
BTRN_WF_test<- workflow() %>% 
  add_model (lr_BTRN_test) %>%
  add_recipe(BTRN_recipe)

#Creation of Single Function
BTRN_fit_test<- BTRN_WF %>% 
  fit(data= test_data)

#Extracting 
BTRN_fit_test %>%
  extract_fit_parsnip() %>%
  tidy()

#Predicting 
predict(BTRN_fit_test, test_data)

pred_BTRN_test<- augment(BTRN_fit_test, test_data)

pred_BTRN_test %>% 
  select(BodyTemp, .pred)
```

## **Model Assessment 1 \[Test\]**

```{r}
BTRN_rmse_test<- pred_BTRN_test %>% 
  rmse(truth=BodyTemp, .pred)

BTRN_rmse_test
```

Our training data out preformed our test data, estimates 1.2 and 1.12 respectively. Thus, runny nose does not seem like a predictor of body temperature.
