[
  {
    "objectID": "fluanalysis/code/modeleval.html",
    "href": "fluanalysis/code/modeleval.html",
    "title": "modeleval",
    "section": "",
    "text": "library(here)\n\nhere() starts at C:/GitHub/MADA/nathangreenslit-MADA-portfolio\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2\n──\n\n\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.2.1     ✔ dplyr   1.1.1\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(rsample) #Data splitting\n\nWarning: package 'rsample' was built under R version 4.2.3\n\nlibrary(tidymodels)#Modeling\n\nWarning: package 'tidymodels' was built under R version 4.2.3\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.3     ✔ recipes      1.0.5\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.4     ✔ workflows    1.1.3\n✔ modeldata    1.1.0     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.4     ✔ yardstick    1.1.0\n\n\nWarning: package 'dials' was built under R version 4.2.3\n\n\nWarning: package 'infer' was built under R version 4.2.3\n\n\nWarning: package 'modeldata' was built under R version 4.2.3\n\n\nWarning: package 'parsnip' was built under R version 4.2.3\n\n\nWarning: package 'recipes' was built under R version 4.2.3\n\n\nWarning: package 'tune' was built under R version 4.2.3\n\n\nWarning: package 'workflows' was built under R version 4.2.3\n\n\nWarning: package 'workflowsets' was built under R version 4.2.3\n\n\nWarning: package 'yardstick' was built under R version 4.2.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\n\n\n\n\n\nd<- readRDS(here(\"fluanalysis\", \"data\", \"SypAct_clean.rds\"))"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#test-data",
    "href": "fluanalysis/code/modeleval.html#test-data",
    "title": "modeleval",
    "section": "Test Data",
    "text": "Test Data\n\nROC Curve\n\nflu_aug_test %>% \n  roc_curve(truth = Nausea, .pred_Yes, event_level = \"second\") %>% #> For binary classification, the first factor level is assumed to be the event. Use the argument `event_level = \"second\"` to alter this as needed.\n  autoplot()\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\nℹ The deprecated feature was likely used in the yardstick package.\n  Please report the issue at <https://github.com/tidymodels/yardstick/issues>.\n\n\n\n\n\n\n\nArea Under the Curve\n\nflu_aug_test %>% \n  roc_auc(truth = Nausea, .pred_Yes, event_level = \"second\")\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.724"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#train-data",
    "href": "fluanalysis/code/modeleval.html#train-data",
    "title": "modeleval",
    "section": "Train Data",
    "text": "Train Data\n\nROC Curve\n\nflu_aug_train %>% \n  roc_curve(truth = Nausea, .pred_Yes, event_level = \"second\") %>% \n  autoplot()\n\n\n\n\n\n\nArea Under the Curve\n\nflu_aug_train %>% \n  roc_auc(truth = Nausea, .pred_Yes, event_level = \"second\")\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.787"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#test-data-1",
    "href": "fluanalysis/code/modeleval.html#test-data-1",
    "title": "modeleval",
    "section": "Test Data",
    "text": "Test Data\n\nROC Curve\n\nvom_aug_test %>% \n  roc_curve(truth = Nausea, .pred_Yes, event_level = \"second\") %>% \n  autoplot()\n\n\n\n\n\n\nArea Under the Curve\n\nvom_aug_test %>% \n  roc_auc(truth = Nausea, .pred_Yes, event_level = \"second\")\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.578"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#train-data-1",
    "href": "fluanalysis/code/modeleval.html#train-data-1",
    "title": "modeleval",
    "section": "Train Data",
    "text": "Train Data\n\nROC Curve\n\nvom_aug_train %>% \n  roc_curve(truth = Nausea, .pred_Yes, event_level = \"second\") %>% \n  autoplot()\n\n\n\n\n\n\nArea Under the Curve\n\nvom_aug_train %>% \n  roc_auc(truth = Nausea, .pred_Yes, event_level = \"second\")\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.622"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#workflow-creation-and-prediction-training",
    "href": "fluanalysis/code/modeleval.html#workflow-creation-and-prediction-training",
    "title": "modeleval",
    "section": "Workflow Creation and Prediction [Training]",
    "text": "Workflow Creation and Prediction [Training]\n\n#Now let's set or define our model\nlr_BT<- linear_reg() %>%\n  set_engine(\"lm\")\n\n#Creating Workflow\nBT_WF<- workflow() %>% \n  add_model (lr_BT) %>%\n  add_recipe(BT_recipe)\n\n#Creation of Single Function\nBT_fit<- BT_WF %>% \n  fit(data= train_data)\n\n#Extracting \nBT_fit %>%\n  extract_fit_parsnip() %>%\n  tidy()\n\n# A tibble: 38 × 5\n   term                 estimate std.error statistic    p.value\n   <chr>                   <dbl>     <dbl>     <dbl>      <dbl>\n 1 (Intercept)           97.7        0.345   284.    0         \n 2 SwollenLymphNodesYes  -0.191      0.108    -1.77  0.0779    \n 3 ChestCongestionYes     0.128      0.116     1.10  0.272     \n 4 ChillsSweatsYes        0.196      0.148     1.32  0.188     \n 5 NasalCongestionYes    -0.163      0.137    -1.19  0.233     \n 6 CoughYNYes             0.380      0.289     1.31  0.189     \n 7 SneezeYes             -0.471      0.114    -4.13  0.0000425 \n 8 FatigueYes             0.354      0.187     1.89  0.0592    \n 9 SubjectiveFeverYes     0.558      0.119     4.70  0.00000338\n10 HeadacheYes            0.0838     0.151     0.554 0.580     \n# … with 28 more rows\n\n#Predicting \npredict(BT_fit, train_data)\n\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n\n\n# A tibble: 547 × 1\n   .pred\n   <dbl>\n 1  99.1\n 2  98.9\n 3  98.7\n 4  98.8\n 5  99.0\n 6  98.4\n 7  98.8\n 8  99.6\n 9  99.4\n10  98.7\n# … with 537 more rows\n\npred_BT<- augment(BT_fit, train_data)\n\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n\npred_BT %>% \n  select(BodyTemp, .pred)\n\n# A tibble: 547 × 2\n   BodyTemp .pred\n      <dbl> <dbl>\n 1    100.   99.1\n 2     98.2  98.9\n 3     98.1  98.7\n 4    101.   98.8\n 5     98    99.0\n 6     98    98.4\n 7     98    98.8\n 8    103.   99.6\n 9     99.4  99.4\n10    102.   98.7\n# … with 537 more rows"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#model-assessment-1-training",
    "href": "fluanalysis/code/modeleval.html#model-assessment-1-training",
    "title": "modeleval",
    "section": "Model Assessment 1 [Training]",
    "text": "Model Assessment 1 [Training]\n\nBT_rmse<- pred_BT %>% \n  rmse(truth=BodyTemp, .pred)\n\nBT_rmse\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        1.11"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#model-assessment-2-training",
    "href": "fluanalysis/code/modeleval.html#model-assessment-2-training",
    "title": "modeleval",
    "section": "Model Assessment 2 [Training]",
    "text": "Model Assessment 2 [Training]\n\nBT_rsq<- pred_BT %>% \n  rsq(truth=BodyTemp, .pred)\n\nBT_rsq\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.156"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#making-the-recipe-test",
    "href": "fluanalysis/code/modeleval.html#making-the-recipe-test",
    "title": "modeleval",
    "section": "Making the Recipe [Test]",
    "text": "Making the Recipe [Test]\n\nset.seed(321)\n#Creating the recipe \nBT_recipe_test<- recipe(BodyTemp ~., data=test_data)"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#workflow-creation-and-prediction-test",
    "href": "fluanalysis/code/modeleval.html#workflow-creation-and-prediction-test",
    "title": "modeleval",
    "section": "Workflow Creation and Prediction [Test]",
    "text": "Workflow Creation and Prediction [Test]\n\n#Now let's set or define our model\nlr_BT_test<- linear_reg() %>%\n  set_engine(\"lm\")\n\n#Creating Workflow\nBT_WF_test<- workflow() %>% \n  add_model (lr_BT_test) %>%\n  add_recipe(BT_recipe)\n\n#Creation of Single Function\nBT_fit_test<- BT_WF_test %>% \n  fit(data= test_data)\n\n#Extracting \nBT_fit_test %>%\n  extract_fit_parsnip() %>%\n  tidy()\n\n# A tibble: 38 × 5\n   term                 estimate std.error statistic   p.value\n   <chr>                   <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)           99.1        0.719  138.     3.66e-158\n 2 SwollenLymphNodesYes  -0.0409     0.210   -0.195  8.45e-  1\n 3 ChestCongestionYes    -0.104      0.221   -0.468  6.40e-  1\n 4 ChillsSweatsYes        0.244      0.274    0.891  3.74e-  1\n 5 NasalCongestionYes    -0.483      0.252   -1.91   5.78e-  2\n 6 CoughYNYes             0.286      0.481    0.594  5.53e-  1\n 7 SneezeYes              0.0656     0.220    0.298  7.66e-  1\n 8 FatigueYes            -0.124      0.347   -0.359  7.20e-  1\n 9 SubjectiveFeverYes    -0.0224     0.230   -0.0974 9.23e-  1\n10 HeadacheYes           -0.145      0.245   -0.592  5.55e-  1\n# … with 28 more rows\n\n#Predicting \npredict(BT_fit_test, test_data)\n\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n\n\n# A tibble: 183 × 1\n   .pred\n   <dbl>\n 1  99.1\n 2  98.9\n 3 100. \n 4  98.3\n 5  99.7\n 6  98.2\n 7  99.8\n 8  99.0\n 9  98.9\n10  99.4\n# … with 173 more rows\n\npred_BT_test<- augment(BT_fit_test, test_data)\n\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n\npred_BT_test %>% \n  select(BodyTemp, .pred)\n\n# A tibble: 183 × 2\n   BodyTemp .pred\n      <dbl> <dbl>\n 1     98.3  99.1\n 2     98.8  98.9\n 3    102.  100. \n 4     98.2  98.3\n 5     97.8  99.7\n 6     97.8  98.2\n 7    100    99.8\n 8    101.   99.0\n 9     98.8  98.9\n10    100.   99.4\n# … with 173 more rows"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#model-assessment-1-test",
    "href": "fluanalysis/code/modeleval.html#model-assessment-1-test",
    "title": "modeleval",
    "section": "Model Assessment 1 [Test]",
    "text": "Model Assessment 1 [Test]\n\nBT_rmse_test<- pred_BT_test %>% \n  rmse(truth=BodyTemp, .pred)\n\nBT_rmse_test\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        1.02"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#model-assessment-2-test",
    "href": "fluanalysis/code/modeleval.html#model-assessment-2-test",
    "title": "modeleval",
    "section": "Model Assessment 2 [Test]",
    "text": "Model Assessment 2 [Test]\n\nBT_rsq_test<- pred_BT_test %>% \n  rsq(truth=BodyTemp, .pred)\n\nBT_rsq_test\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.195"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#making-the-recipe-body-temperature-runny-nose-training",
    "href": "fluanalysis/code/modeleval.html#making-the-recipe-body-temperature-runny-nose-training",
    "title": "modeleval",
    "section": "Making the Recipe: Body Temperature & Runny Nose [Training]",
    "text": "Making the Recipe: Body Temperature & Runny Nose [Training]\n\nset.seed(321)\n#Creating the recipe \nBTRN_recipe<- recipe(BodyTemp~RunnyNose, data=train_data)"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#workflow-creation-and-prediction-training-1",
    "href": "fluanalysis/code/modeleval.html#workflow-creation-and-prediction-training-1",
    "title": "modeleval",
    "section": "Workflow Creation and Prediction [Training]",
    "text": "Workflow Creation and Prediction [Training]\n\n#Now let's set or define our model\nlr_BTRN<- linear_reg() %>%\n  set_engine(\"lm\")\n\n#Creating Workflow\nBTRN_WF<- workflow() %>% \n  add_model (lr_BTRN) %>%\n  add_recipe(BTRN_recipe)\n\n#Creation of Single Function\nBTRN_fit<- BTRN_WF %>% \n  fit(data= train_data)\n\n#Extracting \nBTRN_fit %>%\n  extract_fit_parsnip() %>%\n  tidy()\n\n# A tibble: 2 × 5\n  term         estimate std.error statistic p.value\n  <chr>           <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    99.1      0.0964   1028.    0     \n2 RunnyNoseYes   -0.261    0.114      -2.29  0.0225\n\n#Predicting \npredict(BTRN_fit, train_data)\n\n# A tibble: 547 × 1\n   .pred\n   <dbl>\n 1  98.9\n 2  98.9\n 3  98.9\n 4  98.9\n 5  98.9\n 6  98.9\n 7  98.9\n 8  98.9\n 9  99.1\n10  98.9\n# … with 537 more rows\n\npred_BTRN<- augment(BTRN_fit, train_data)\n\npred_BTRN %>% \n  select(BodyTemp, .pred)\n\n# A tibble: 547 × 2\n   BodyTemp .pred\n      <dbl> <dbl>\n 1    100.   98.9\n 2     98.2  98.9\n 3     98.1  98.9\n 4    101.   98.9\n 5     98    98.9\n 6     98    98.9\n 7     98    98.9\n 8    103.   98.9\n 9     99.4  99.1\n10    102.   98.9\n# … with 537 more rows"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#model-assessment-1-training-1",
    "href": "fluanalysis/code/modeleval.html#model-assessment-1-training-1",
    "title": "modeleval",
    "section": "Model Assessment 1 [Training]",
    "text": "Model Assessment 1 [Training]\n\nBTRN_rmse<- pred_BTRN %>% \n  rmse(truth=BodyTemp, .pred)\n\nBTRN_rmse\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        1.21"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#making-the-recipe-body-temperature-runny-nose-training-1",
    "href": "fluanalysis/code/modeleval.html#making-the-recipe-body-temperature-runny-nose-training-1",
    "title": "modeleval",
    "section": "Making the Recipe: Body Temperature & Runny Nose [Training]",
    "text": "Making the Recipe: Body Temperature & Runny Nose [Training]\n\nset.seed(321)\n#Creating the recipe \nBTRN_recipe_test<- recipe(BodyTemp~RunnyNose, data=test_data)"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#workflow-creation-and-prediction-test-1",
    "href": "fluanalysis/code/modeleval.html#workflow-creation-and-prediction-test-1",
    "title": "modeleval",
    "section": "Workflow Creation and Prediction [Test]",
    "text": "Workflow Creation and Prediction [Test]\n\n#Now let's set or define our model\nlr_BTRN_test<- linear_reg() %>%\n  set_engine(\"lm\")\n\n#Creating Workflow\nBTRN_WF_test<- workflow() %>% \n  add_model (lr_BTRN_test) %>%\n  add_recipe(BTRN_recipe)\n\n#Creation of Single Function\nBTRN_fit_test<- BTRN_WF %>% \n  fit(data= test_data)\n\n#Extracting \nBTRN_fit_test %>%\n  extract_fit_parsnip() %>%\n  tidy()\n\n# A tibble: 2 × 5\n  term         estimate std.error statistic   p.value\n  <chr>           <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)    99.1       0.154    642.   7.60e-306\n2 RunnyNoseYes   -0.388     0.184     -2.11 3.63e-  2\n\n#Predicting \npredict(BTRN_fit_test, test_data)\n\n# A tibble: 183 × 1\n   .pred\n   <dbl>\n 1  99.1\n 2  98.7\n 3  98.7\n 4  98.7\n 5  99.1\n 6  99.1\n 7  98.7\n 8  99.1\n 9  99.1\n10  99.1\n# … with 173 more rows\n\npred_BTRN_test<- augment(BTRN_fit_test, test_data)\n\npred_BTRN_test %>% \n  select(BodyTemp, .pred)\n\n# A tibble: 183 × 2\n   BodyTemp .pred\n      <dbl> <dbl>\n 1     98.3  99.1\n 2     98.8  98.7\n 3    102.   98.7\n 4     98.2  98.7\n 5     97.8  99.1\n 6     97.8  99.1\n 7    100    98.7\n 8    101.   99.1\n 9     98.8  99.1\n10    100.   99.1\n# … with 173 more rows"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#model-assessment-1-test-1",
    "href": "fluanalysis/code/modeleval.html#model-assessment-1-test-1",
    "title": "modeleval",
    "section": "Model Assessment 1 [Test]",
    "text": "Model Assessment 1 [Test]\n\nBTRN_rmse_test<- pred_BTRN_test %>% \n  rmse(truth=BodyTemp, .pred)\n\nBTRN_rmse_test\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        1.13\n\n\nOur training data out preformed our test data, estimates 1.2 and 1.12 respectively. Thus, runny nose does not seem like a predictor of body temperature."
  },
  {
    "objectID": "visualization_exercise.html",
    "href": "visualization_exercise.html",
    "title": "Visualization Exercise",
    "section": "",
    "text": "The plot that I am reproducing can be found on the fiverthirtyeight article “This year’s Boston Marathon was Slooooowww” from 2018. By graphing winning times from previous marathon’s by country, the plot shows that the winners (both men and women) had slower times in 2018 as compared to previous years. The dataset used can be found on the Boston Athletic Association website. The datasets (2) contain country, time, name, and year for both men and women respectively. Here is the original plot that I will be replicating:"
  },
  {
    "objectID": "visualization_exercise.html#libraries",
    "href": "visualization_exercise.html#libraries",
    "title": "Visualization Exercise",
    "section": "Libraries",
    "text": "Libraries\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\nlibrary(here)\nlibrary(scales)\nlibrary(ggthemes) #To get plot themes\n\nWarning: package 'ggthemes' was built under R version 4.2.3\n\nlibrary(ggpubr)\n\nWarning: package 'ggpubr' was built under R version 4.2.3\n\nlibrary(patchwork) #To stack plots \n\nWarning: package 'patchwork' was built under R version 4.2.3"
  },
  {
    "objectID": "visualization_exercise.html#load-datasets-for-men-and-women-times",
    "href": "visualization_exercise.html#load-datasets-for-men-and-women-times",
    "title": "Visualization Exercise",
    "section": "Load datasets for men and women times",
    "text": "Load datasets for men and women times\n\nmen<- read_csv(here(\"data\",\"men_times.csv\")) #Men's race times\nwomen<- read_csv(here(\"data\", \"women_times.csv\")) #Women's race times"
  },
  {
    "objectID": "visualization_exercise.html#data-altering",
    "href": "visualization_exercise.html#data-altering",
    "title": "Visualization Exercise",
    "section": "Data Altering",
    "text": "Data Altering\nLet’s preview the data:\n\nsummary(men)\n\n      year          name             country              time         \n Min.   :1897   Length:125         Length:125         Length:125       \n 1st Qu.:1928   Class :character   Class :character   Class1:hms       \n Median :1959   Mode  :character   Mode  :character   Class2:difftime  \n Mean   :1959                                         Mode  :numeric   \n 3rd Qu.:1990                                                          \n Max.   :2022                                                          \n\nsummary(women)\n\n      year          name             country              time         \n Min.   :1966   Length:56          Length:56          Length:56        \n 1st Qu.:1980   Class :character   Class :character   Class1:hms       \n Median :1994   Mode  :character   Mode  :character   Class2:difftime  \n Mean   :1994                                         Mode  :numeric   \n 3rd Qu.:2007                                                          \n Max.   :2022                                                          \n\n\nWhile we have winning times up to 2022, the graph was published in 2018, so we need to filter the dates up to that year. Here, I also created a new column that highlighted the primary countries for men and women. Using case_when(), if the country said: Japan (men), Ethiopia (women), United States, or Kenya, the new column repeated that name. Any other country was charactereized as NA in the new column.\n\nMake new column that singles out the three main countries of interest for men and women\n\nmen2<- men %>% \n  mutate(time2 = as.numeric(men$time)) %>% #Switched time from an interval (unknown) to numeric (seconds)\n  mutate(country2 = case_when(country == \"Kenya\"~\"Kenya\",\n                              country == \"United States\"~ \"United States\",\n                              country == \"Japan\"~\"Japan\"))%>%\n   filter(year %in% \"1897\":\"2018\")\n\nwomen2<- women %>% \n   mutate(time2 = as.numeric(women$time)) %>% #Switched time from an interval (unknown) to numeric (seconds)\n  mutate(country2 = case_when(country == \"Kenya\"~\"Kenya\",\n                              country == \"United States\"~ \"United States\",\n                              country == \"Ethiopia\"~\"Ethiopia\")) %>%\n  filter(year %in% \"1966\":\"2018\")\n\nmen_18<- men %>% #Single point of interest (2018)\n  filter(year %in% 2018)\n\nwomen_18<- women %>% #Single point of interest (2018)\n  filter(year %in% 2018)\n\nLet’s take a look at the result.\n\nprint(men2)\n\n# A tibble: 122 × 6\n    year name                           country       time     time2 country2   \n   <dbl> <chr>                          <chr>         <time>   <dbl> <chr>      \n 1  2018 \"Yuki Kawauchi\"                Japan         02:15:58  8158 Japan      \n 2  2017 \"Geoffrey Kirui\"               Kenya         02:09:37  7777 Kenya      \n 3  2016 \"Lemi Berhanu\"                 Ethiopia      02:12:45  7965 <NA>       \n 4  2015 \"Lelisa Desisa\"                Ethiopia      02:09:17  7757 <NA>       \n 5  2014 \"Mebrahtom \\\"Meb\\\" Keflezighi\" United States 02:08:37  7717 United Sta…\n 6  2013 \"Lelisa Desisa\"                Ethiopia      02:10:22  7822 <NA>       \n 7  2012 \"Wesley Korir\"                 Kenya         02:12:40  7960 Kenya      \n 8  2011 \"Geoffrey Mutai\"               Kenya         02:03:02  7382 Kenya      \n 9  2010 \"Robert Kiprono Cheruiyot\"     Kenya         02:05:52  7552 Kenya      \n10  2009 \"Deriba Merga\"                 Ethiopia      02:08:42  7722 <NA>       \n# … with 112 more rows\n\nprint(women2)\n\n# A tibble: 53 × 6\n    year name            country       time     time2 country2     \n   <dbl> <chr>           <chr>         <time>   <dbl> <chr>        \n 1  2018 Desiree Linden  United States 02:39:54  9594 United States\n 2  2017 Edna Kiplagat   Kenya         02:21:52  8512 Kenya        \n 3  2016 Atsede Baysa    Ethiopia      02:29:19  8959 Ethiopia     \n 4  2015 Caroline Rotich Kenya         02:24:55  8695 Kenya        \n 5  2014 Buzunesh Deba   Ethiopia      02:19:59  8399 Ethiopia     \n 6  2013 Rita Jeptoo     Kenya         02:26:25  8785 Kenya        \n 7  2012 Sharon Cherop   Kenya         02:31:50  9110 Kenya        \n 8  2011 Caroline Kilel  Kenya         02:22:36  8556 Kenya        \n 9  2010 Teyba Erkesso   Ethiopia      02:26:11  8771 Ethiopia     \n10  2009 Salina Kosgei   Kenya         02:32:16  9136 Kenya        \n# … with 43 more rows\n\n\n\n\nCreate lists for x axis\nThe figure displays the x axis in years as both 4 digits and 2 digits with a “`”. Here I manually create lists that will be used as axis labels downstream.\n\nmen_years<- c(\"1900\", \"'10\", \"'20\", \"'30\", \"'40\", \"'50\", \"'60\", \"'70\", \"'80\", \"'90\", \"2000\", \"'10\", \"'18\")\nwomen_years <- c(\"1970\",\"'80\", \"'90\", \"2000\", \"'10\", \"`18\" )"
  },
  {
    "objectID": "visualization_exercise.html#plotting",
    "href": "visualization_exercise.html#plotting",
    "title": "Visualization Exercise",
    "section": "Plotting",
    "text": "Plotting\n\nPlot Women\n\n#Basic plotting\nwom<- women2 %>% ggplot() +geom_point(\n  aes(x= year,\n      y = time,\n      color= country2),\n  alpha =0.5,\n  size = 3)+\ntheme_fivethirtyeight()+ #Theme is specific to their website\n  \n#Working with axis scales\n  scale_x_continuous(breaks = c(1970,1980, 1990, 2000,2010,2018), #Breaks will go from 1970-2018 by 10 years\n                     limits = c(1966,2018), #Limits set from 1966-2018\n                     labels = women_years) + #Here is that manual list for the x axis labels \n  scale_y_time(breaks = date_breaks(\"30 mins\"),\n               limits = c(\"7200\", \"12960\"))+ #times are in seconds \n  geom_vline(xintercept = 2018,alpha=0.3, #Adds dashed line to 2018\n             linetype = \"dotted\")+\n  \n#Add Labels/Arrows to Plot\n  annotate(\"text\", x = 2013, y =12555, label = \"WOMEN'S\", color = \"#36454F\", fontface=2, size = 6.4)+\n  annotate(\"text\", x = 2009, y =8300, label = \"Kenya\", color = \"#800080\", fontface =2) +\n  annotate(\"text\", x = 1979, y =11000, label = \"United\\nStates\", color = \"#6495ED\", fontface = 2)+\n  annotate(\"text\", x = 2000, y =9100, label = \"Ethiopia\", color = \"#228B22\", fontface = 2)+\n  annotate(\"text\", x = 2015, y =10600, label = \"Desiree\\nLinden\")+\n  annotate( geom = \"curve\", x = 2015, y = 10100, xend = 2017.3, yend = 9600, \n  curvature = .45, arrow = arrow(length = unit(2, \"mm\")))+\n  \n#Assign Colors by Country. Hex codes were Googled.\n  scale_color_manual(values = c(\"Ethiopia\" = \"#228B22\",\n                                \"United States\" = \"#6495ED\",\n                                \"Kenya\" = \"#800080\"))+\n  \n#Labels \n  labs(y = \"Winning time\",\n      title = \"A slower field at this year's Boston Marathon\",\n      subtitle = \"Finish time for winners of the Boston Marathon, by country\")+#,\n     # caption =\"'18\")+ #This was the only way I could think of adding 2018 the axis that had breaks of 10 years otherwise. \n  \n  \n#Work with Plot colors, fonts, and Label Positions\n  theme(legend.position = \"none\",\n        panel.background = element_rect(\"#E5E4E2\"),\n        plot.background = element_rect(\"#E5E4E2\"),\n        plot.title = element_text(color = \"black\",\n                                   hjust = -1.4),\n        plot.subtitle = element_text(hjust = -.41),\n        axis.title.y = element_text(color = \"#36454F\",\n                                     face= \"bold\")) +\n       # plot.caption = element_text(hjust = 0.96555, vjust = 8.1)) +\n  \n#Create new plot to overlay with point of interest (2018)\n  geom_point(data=women_18,\n           aes(x = year, y= time), \n           pch = 21, color =\"black\", #Outline point \n           size = 3,\n            alpha = 0.8)\n\nwom\n\n\n\n\n\n\nPlot Men\n\n#Basic Plotting\nmn<- men2 %>% ggplot() +geom_point(\n  aes(x= year,\n      y = time,\n      color= country2),\n  alpha = 0.5,\n  size = 3)+\ntheme_fivethirtyeight()+\n  \n#Working with axis scales\n  scale_x_continuous(breaks = c(1900,1910,1920,1930,1940,1950,1960,1970,1980,1990,2000,2010,2018), #Breaks go from 1900-2018 by 10 years\n                     limits = c(1897,2020), #Limits set from 1897-2020\n                    labels = men_years) + #Using list from above for x axis labels\n  scale_y_time(breaks = date_breaks(\"30 mins\"),\n               limits = c(\"7200\", \"10800\"))+ #Time in seconds\n  geom_vline(xintercept = 2018,\n             alpha=0.3,\n             linetype = \"dotted\") +\n  \n#Add Labels/Arrows to Plot\n  annotate(\"text\", x = 2011, y =10500, label = \"MEN'S\", color = \"#36454F\", fontface=2, size = 6.4)+\n  annotate(\"text\", x = 2000, y =7500, label = \"Kenya\", color = \"#800080\", fontface=2) +\n  annotate(\"text\", x = 1919, y =9500, label = \"United\\nStates\", color = \"#6495ED\", fontface=2)+\n  annotate(\"text\", x = 1960, y =7900, label = \"Japan\", color = \"red\", fontface =2)+\n  annotate(\"text\", x = 2010, y =9000, label = \"Yuki\\nKawauchi\")+\n  annotate( geom = \"curve\", x = 2010, y = 8750, xend = 2016.5, yend = 8150, \n    curvature = .45, arrow = arrow(length = unit(2, \"mm\")))+\n  \n#Working with Labels, etc\n   labs(y = \"Winning time\")+\n       #caption  = \"'18\")+\n  theme(legend.position = \"none\",\n        panel.background = element_rect(\"#E5E4E2\"),\n        plot.background = element_rect(\"#E5E4E2\"),\n       axis.title.y = element_text(color = \"#36454F\",\n                                   face = \"bold\"))+\n      # plot.caption = element_text(hjust = 0.952, vjust = 8.1)) +\n\n#Assign Colors by Country\n  scale_color_manual(values = c(\"Japan\" = \"red\",\n                                \"United States\" = \"#6495ED\",\n                                \"Kenya\" = \"#800080\"))+\n  \n\n#Overlay Plot with point of interest (2018)\n  geom_point(data=men_18, \n             aes(x = year, y= time), \n             pch = 21, color =\"black\",\n             alpha = 0.8,\n             size = 3) \n  \nmn\n\n\n\n\n\n\nFinal Plot\nHere I used ggarrange() to stack the plots on top of one another.\n\nfigure<- ggarrange(wom, mn + font(\"x.text\", size = 10),\n                    ncol = 1, nrow = 2) #Final plot is 1 column and 2 rows \n\n                \nfigure\n\n\n\n\nPretty close! A few things that I struggled with were getting the y axis tick labels to be displayed as “2:00:00” as opposed to “02:00:00”. I also could not get the dashed lines for `18 to line up for both graphs without skewing everything else."
  },
  {
    "objectID": "visualization_exercise.html#save-as-png",
    "href": "visualization_exercise.html#save-as-png",
    "title": "Visualization Exercise",
    "section": "Save as PNG",
    "text": "Save as PNG\n\npng(file = here(\"results\",\"plots\", \"marathon.png\"))\nfigure\ndev.off()\n\npng \n  2"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html#making-the-recipe-training",
    "href": "fluanalysis/code/modeleval.html#making-the-recipe-training",
    "title": "modeleval",
    "section": "Making the Recipe [Training]",
    "text": "Making the Recipe [Training]\n\nset.seed(321)\n#Creating the recipe \nBT_recipe<- recipe(BodyTemp ~., data=train_data)"
  }
]